{"version":3,"file":"component---src-templates-post-tsx-content-file-path-users-shakogegia-developer-shakogegia-github-io-content-blog-2018-01-30-english-to-georgian-dictionary-index-mdx-74f98061981170d33928.js","mappings":"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","sources":["webpack://my-gatsby-site/./content/blog/2018-01-30-english-to-georgian-dictionary/index.mdx","webpack://my-gatsby-site/./src/templates/post.tsx","webpack://my-gatsby-site/./src/components/share.tsx","webpack://my-gatsby-site/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I want to share open source English to Georgian dictionary for Kindle devices generated by me.\"), \"\\n\", React.createElement(_components.p, null, \"Dictionary is not yet fully completed, but there are solid number of translated words already\"), \"\\n\", React.createElement(_components.p, null, \"Its easy to use: you just select the word you want to translate on Kindle and you`ll get the little window of definition (as seen on screenshot below)\"), \"\\n\", React.createElement(_components.p, null, \"Translated Words - \", React.createElement(_components.strong, null, \"40533\")), \"\\n\", React.createElement(_components.p, null, \"Source code and generated dictionary lives on Github.\"), \"\\n\", React.createElement(_components.p, null, \"You can use source code for free of charge to create any type of dictionary for Kindle devices\"), \"\\n\", React.createElement(_components.p, null, \"For this dictionary is used Google Translate API, but you can use any API for translation, or translate it manually with provided tool for words translation\"), \"\\n\", React.createElement(_components.p, null, \"Github repository\\n\", React.createElement(_components.a, {\n    href: \"https://github.com/shakogegia/english_georgian_dictionary_kindle\"\n  }, \"English to Georgian Dictionary for Kindle e-Readers\")), \"\\n\", React.createElement(_components.p, null, \"Generated dictionary: \", React.createElement(_components.a, {\n    href: \"https://github.com/shakogegia/english_georgian_dictionary_kindle/releases/download/0.1/dict.mobi\"\n  }, \"Dictionary\")), \"\\n\", React.createElement(_components.p, null, \"Installation instruction into kindle devices is provided in Github`s README.md\"), \"\\n\", React.createElement(_components.p, null, \"View post on Medium\\n\", React.createElement(_components.a, {\n    href: \"https://medium.com/@shalva.gegia/%E1%83%94%E1%83%9C%E1%83%92%E1%83%9A%E1%83%98%E1%83%A1%E1%83%A3%E1%83%A0-%E1%83%A5%E1%83%90%E1%83%A0%E1%83%97%E1%83%A3%E1%83%9A%E1%83%98-%E1%83%9A%E1%83%94%E1%83%A5%E1%83%A1%E1%83%98%E1%83%99%E1%83%9D%E1%83%9C%E1%83%9D-%E1%83%A5%E1%83%98%E1%83%9C%E1%83%93%E1%83%9A%E1%83%98%E1%83%A1%E1%83%97%E1%83%95%E1%83%98%E1%83%A1-ac7a57469219\"\n  }, \"medium\"), \".\"), \"\\n\", React.createElement(\"p\", {\n    align: \"center\"\n  }, React.createElement(\"img\", {\n    height: \"600px\",\n    alt: \"English to Georgian dictionary for Kindle\",\n    src: \"./images/kindle-screenshot.png\"\n  })));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/shakogegia/Developer/shakogegia.github.io/content/blog/2018-01-30-english-to-georgian-dictionary/index.mdx\";\nimport * as React from 'react';\nimport Layout from '../components/layout/main';\nimport SEO from '../components/seo';\nimport Share from 'src/components/share';\nfunction Post(_ref) {\n  var _mdx$frontmatter$bann, _mdx$frontmatter$bann2;\n  let {data: {site, mdx}, pageContext: {next, prev}, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(SEO, {\n    title: mdx.frontmatter.title,\n    description: mdx.excerpt,\n    image: (_mdx$frontmatter$bann = mdx.frontmatter.banner) === null || _mdx$frontmatter$bann === void 0 ? void 0 : (_mdx$frontmatter$bann2 = _mdx$frontmatter$bann.childImageSharp) === null || _mdx$frontmatter$bann2 === void 0 ? void 0 : _mdx$frontmatter$bann2.fluid.src,\n    pathname: \"/\" + mdx.frontmatter.slug,\n    article: true\n  }), React.createElement(\"div\", {\n    className: \"max-w-3xl m-auto mt-8\"\n  }, React.createElement(\"h3\", {\n    className: \"text-center text-3xl iAWriterDuospaceBold transition-colors dark:text-gray-200\"\n  }, mdx.frontmatter.title), React.createElement(\"div\", {\n    className: \"prose max-w-none mt-10 prose-lg iAWriterDuospace text-gray-500 transition-colors dark:text-gray-300 dark:prose-a:text-gray-200 dark:prose-strong:text-gray-200 dark:prose-blockquote:text-gray-200 dark:prose-headings:text-gray-200\"\n  }, children), React.createElement(\"div\", {\n    className: \"mt-14\"\n  }, React.createElement(\"em\", {\n    className: \"font-extralight iAWriterDuospaceItalic text-gray-400\"\n  }, \"Published on \", mdx.frontmatter.date)), React.createElement(\"div\", {\n    className: \"py-20\"\n  }, React.createElement(\"div\", {\n    className: \"w-full border-t border-gray-100 transition-colors dark:border-gray-600\"\n  })), React.createElement(\"div\", {\n    className: \"py-20\"\n  }, React.createElement(Share, {\n    text: mdx.frontmatter.title,\n    url: \"/\" + mdx.frontmatter.slug\n  }))));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nconst pageQuery = \"470471436\";\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { IoWaterOutline, IoWater } from 'react-icons/io5'\n\nexport default function Share(props: { url: string, text: string }) {\n  const { site } = useStaticQuery(query)\n\n  return (\n    <div className=\"flex justify-center mx-auto max-w-sm\">\n      <div className='flex flex-col items-center text-center space-y-3 group'>\n        <div>\n          <IoWaterOutline className='text-3xl text-gray-600 block group-hover:hidden' />\n          <IoWater className='text-3xl text-gray-600 hidden group-hover:block' />\n        </div>\n        <a\n          className='text-xl text-gray-600 iAWriterDuospace'\n          href={`https://twitter.com/intent/tweet?url=${site?.siteMetadata?.siteUrl}${encodeURIComponent(props.url)}&text=${encodeURIComponent(\n            props.text,\n          )}&via=${site?.siteMetadata?.twitterUsername.replace('@', '')}`}\n        >\n          <span className='underline'>Click here</span> to share this article with your followers on Twitter if you liked it.\n        </a>\n        <span className='font-mono text-sm text-gray-500'>Help this note with watering to grow.</span>\n      </div>\n    </div>\n  )\n}\n\nconst query = graphql`\n  query {\n    site {\n      siteMetadata {\n        siteUrl\n        twitterUsername\n      }\n    }\n  }\n`\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","_provideComponents","components","React","href","align","height","alt","src","wrapper","MDXLayout","Post","_ref","_mdx$frontmatter$bann","_mdx$frontmatter$bann2","data","site","mdx","pageContext","next","prev","children","Layout","SEO","title","frontmatter","description","excerpt","image","banner","childImageSharp","fluid","pathname","slug","article","className","date","Share","text","url","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useStaticQuery","query","IoWaterOutline","IoWater","siteMetadata","_site$siteMetadata","siteUrl","encodeURIComponent","_site$siteMetadata2","twitterUsername","replace","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}